How can we build our own Docker image?
But first let's answer the question when do we need to do this?
The problem with our current setup, If we're taking a look at the deploy staging or deploy production 
stages. We need to install netlify cli and jq. With every execution, this is taking a bit of time 
because we need to download netlify cli and node jq, install it locally and then we can use it. 
However, we could build our own Docker image that has Netlify CLI and node JK in advance.


So how can we do that?
In order to create a custom Docker file, we need to specify how we want that image to be built, and for 
that we're going to define here a new file which is called "Dockerfile" at the root foder of the 
project.

Docker file is just a text document that contains instructions for building a Docker image. You can 
think of it like a recipe, which tells Docker exactly what needs to be done step by step. On the first 
and probably most important instruction in a Dockerfile is the base image.

Essentially, we never start from scratch.

We start from an existing image and we add something to that image.

In our case, we want to use this image here, which has worked out pretty well.

And to this image we want to add this additional tools that are missing.

So in the Docker file in capital letters we're going to write from.

And then we're gonna paste this name.

We are starting our Docker image from this existing Docker image.

And then on top of this we're going to use here the command run.

These are all instructions.

It's telling Docker what to do.

And what we want to do is run this command.

And we want to install Netlify CLI and we want to install node Jake.

I'm gonna paste this here.

And apart from this, we're no longer in a project here.

So we want to pass here the dash G flag so that these tools will be globally installed.

And for a very simple image, this is all we need.

So we can simply save this file and close it.

And then inside the pipeline.

We need to build this image.

So we need to happen somewhere very soon before this image is being used.

So now for essentially learning purposes we're going to do it here right in the beginning.

So I'm going to define a new stage which is called Docker.

In this stage, we'll have steps.

And inside here we're going to have a shell step.

We don't need any Docker image or something like that.

Docker is already available on this Jenkins installation.

So we're going to use the Docker build command.

I'm going to write here Docker build.

And then we need to specify a name for this image.

Essentially we need to tag it and provide an identifier.

And that will be done by passing here the flag dash t and the name.

I'm just going to call this my playwright.

Maybe we can come up with a better name, but I think for now, this should exemplify what we're trying

to do.

I'm going to write here my playwright.

And after that, super important.

We're gonna pass here a dot and a dot in Linux means here in this current directory.

So what the Docker build command will do when executed inside the root of our project.

It's gonna look for this Jenkins file by default.

And it's going to build a Docker image.

So I'm going to commit these changes.

And we're going to take a look at our pipeline to see how this works in practice.

So now taking a look at the pipeline, we can open here the logs for the first job, which was already

executed.

And we're going to notice here a few things.

But this is just to confirm that this image has been successfully built.

So we see here our command docker build.

This is our tag.

And what Docker is doing here is taking this base image.

You'll see here.

This is the first step.

So it's using this base image.

It was already there.

Then it is running the command npm install with dash g.

This is the global flag.

So these are all installed globally.

And then it is exporting the image.

And this image will be available here so that we can use it.

So that's about it.

It was a super fast process.

It didn't take a lot of time.

So in a nutshell, to build a Docker image.

We also define a docker file.

Inside the docker file there are a series of commands we use.

We've learned the most basic ones, which is from.

We have one base image and we're starting from that image.

And then with run we are running some commands during the build process of the image, so that all the

tools and everything that we are installing here are available when we're running the image.